// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JoinClient is the client API for Join service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoinClient interface {
	Candidates(ctx context.Context, in *CandidateArgs, opts ...grpc.CallOption) (*Candidates, error)
}

type joinClient struct {
	cc grpc.ClientConnInterface
}

func NewJoinClient(cc grpc.ClientConnInterface) JoinClient {
	return &joinClient{cc}
}

func (c *joinClient) Candidates(ctx context.Context, in *CandidateArgs, opts ...grpc.CallOption) (*Candidates, error) {
	out := new(Candidates)
	err := c.cc.Invoke(ctx, "/pb.Join/candidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoinServer is the server API for Join service.
// All implementations must embed UnimplementedJoinServer
// for forward compatibility
type JoinServer interface {
	Candidates(context.Context, *CandidateArgs) (*Candidates, error)
	mustEmbedUnimplementedJoinServer()
}

// UnimplementedJoinServer must be embedded to have forward compatible implementations.
type UnimplementedJoinServer struct {
}

func (UnimplementedJoinServer) Candidates(context.Context, *CandidateArgs) (*Candidates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candidates not implemented")
}
func (UnimplementedJoinServer) mustEmbedUnimplementedJoinServer() {}

// UnsafeJoinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoinServer will
// result in compilation errors.
type UnsafeJoinServer interface {
	mustEmbedUnimplementedJoinServer()
}

func RegisterJoinServer(s grpc.ServiceRegistrar, srv JoinServer) {
	s.RegisterService(&Join_ServiceDesc, srv)
}

func _Join_Candidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandidateArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServer).Candidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Join/candidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServer).Candidates(ctx, req.(*CandidateArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Join_ServiceDesc is the grpc.ServiceDesc for Join service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Join_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Join",
	HandlerType: (*JoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "candidates",
			Handler:    _Join_Candidates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins/join/pb/join.proto",
}
